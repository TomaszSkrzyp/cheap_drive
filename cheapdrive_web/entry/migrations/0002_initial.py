# Generated by Django 5.1.4 on 2025-01-15 17:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('entry', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StationPrices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(choices=[('amic', 'Amic'), ('lotos', 'Lotos'), ('lotos optima', 'Lotos Optima'), ('circle-k', 'Circle-k'), ('bp', 'BP'), ('moya', 'Moya'), ('auchan', 'Auchan'), ('tesco', 'Tesco'), ('carrefour', 'Carrefour'), ('olkop', 'Olkop'), ('leclerc', 'Leclerc'), ('intermarche', 'Intermarche'), ('mol', 'MOL'), ('pieprzyk', 'Pieprzyk'), ('huzar', 'Huzar'), ('total', 'Total'), ('polska', 'Polska')], help_text='Select the fuel station brand.', max_length=20)),
                ('diesel_price', models.DecimalField(decimal_places=2, help_text='Price per liter of Diesel in PLN', max_digits=5, null=True)),
                ('lpg_price', models.DecimalField(decimal_places=2, help_text='Price per liter of LPG in PLN', max_digits=5, null=True)),
                ('pb95_price', models.DecimalField(decimal_places=2, help_text='Price per liter of BP95 in PLN', max_digits=5, null=True)),
                ('pb98_price', models.DecimalField(decimal_places=2, help_text='Price per liter of BP98 in PLN', max_digits=5, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=100, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326)),
                ('station_prices', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stations', to='entry.stationprices')),
            ],
        ),
    ]
